"""
============================
Project: py49
Author:柠檬班-海励
Time:2022/4/1 19:28
E-mail:2227092769@qq.com
Company:湖南零檬信息技术有限公司
Site: http://www.lemonban.com
Forum: http://testingpai.com 
============================
"""
"""


一、类属性
1、创建：写在函数外面，写在类里面
2、访问：
   类外面：1、类名称.属性名称
   类里面：1、self.属性名称 == 实例.属性名称   2、类名称.属性名称

二、实例属性
1、创建: 创建在def __init__() 方法中，命名self.名称
        在类实例化之后自动执行
        如果要在整个类当中使用，命名必须是self.名称，不加self只是__init__()函数的局部变量，不能通过类实例调用
2、访问
   类外面：1、类实例.属性名称
   类里面：1、self.属性名称
   
   
三、私有属性
创建：
1、双下划线开头的属性为私有属性
2、私有属性只是改变了它的作用域，调用方式不变
访问：
1、类访问类属性
2、实例访问所有的属性
3、私有属性只能在类内部使用，不能在外部使用

类方法
1、使用装饰器@classmethod
2、第一个参数必须是当前【类本身】，该参数名一般约定为"cls"
3、类方法可以被【类】+【类实例】调用
4、类内部：self.方法名称()、类.方法名称()
5、类外部：类.方法名称()、类实例.方法名称()
6、不可以使用【实例属性】、【实例方法】
7、使用场景：方法内部不需要使用实例属性和实例方法，适合定义类方法

实例方法
特点：
1、创建在类中的普通方法
2、第一参数必须是类实例
访问：
在类里面：self.test_01()  # self == Dog() 
在类外面：类实例.实例方法名称()
1、第一个参数必须是【实例对象】，该参数名一般约定为"self"
2、通过它来传递实例的属性和方法（也可以传类的属性和方法）只能由实例对象调用
3、类内部：self.函数名称()
4、类外部：类名称().函数名称()
5、使用场景：方法内部如果要使用实例属性或实例方法，就定义为实例方法

私有方法

if __name__ == '__main__':



"""
class Dog:
    #类属性
    name = "小白"
    color = "白色"
    __weight = 10 # 类的私有属性

   #实例方法，实例化之后才能调用，必须通过类实例调用，self == Dog()
    def test_01(self):
        print("访问类属性：",Dog.color)
        print("self的内存地址:",id(self)) # self 就是类实例本身，是在调用实例方法的时候自动传传来的

    def test_02(self):
        print("执行test_02方法")
        self.test_01()


# my_dog = Dog()
# print("类实例的内存地址：",id(my_dog))
# my_dog.test_01()

# 实例方法的第一个参数self 就是 类实例
# Dog.test_01(Dog())

# my_dog = Dog()
# my_dog.test_02()



